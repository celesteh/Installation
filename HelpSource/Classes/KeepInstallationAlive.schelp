TITLE:: KeepInstallationAlive
summary:: Tools to detect and recover from crashes
categories:: Control
related:: Classes/WatchDog, Guides/KeepAnInstallationRunning

DESCRIPTION::
KeepInstallationAlive monitors threads and the server to check for crashes. It can be instructed to try increasingly invasive recovery methods and, if those fail, to quit sclang.

CLASSMETHODS::

METHOD::new
Create a new KeepInstallationAlive object
argument:: config_file_path
An optional full path to a configuration file
argument:: port
An optional number for a Server port. The default Server will use this port number, if set.
Discussion::
Configuration files can store information needed across multiple files and by different languages, including bash and python. The file format is:
code::
# This line is commented out
name=value
::
To use this these pairs,
code::
(
var inst;
inst = KeepInstallationAlive("/home/me/Documents/code/sc/my_installation.config");
inst.config[\name].postln;
)
::
With the example file above, this would print code:: "value" ::


INSTANCEMETHODS::

Method:: port
Get or set the Server port

Method:: s
Returns::
Server.default

Method:: boot
argument:: loadSynths
If true, it tries to load the SynthDefs known to the installation
argument:: action
A function evaluated when the server is known to be booted
argument:: checkIn
If true, then check in with the watchdog associated with id
argument:: id
The id of the WatchDog to check in to
Discussion::
This method must be called from a Routine. It tries to the boot the server, on the port given when the KeepInstallationAlive object is created (or on the default port, if nothing is specified). Once the server is known to be booted, the action is evaluated, optionally synths are loaded, and the thread optionally checks in.
If the server is unable to boot, sclang quits.

Method:: addSynthDef
Because the KeepInstallationAlive object may need to restart the server, you will need to add your SynthDefs to it, so it can re-load them.
argument:: synthDef
A SynthDef object

Method:: addGroup
Because the KeepInstallationAlive object may need to restart the server, you will need to add your Groups to it, so it can re-create them.
argument:: name
The name of the Group
argument:: target
The target of the group (which may be the strong::name:: of another group)
argument:: addAction
Where to add the group relative to the target
Discussion::
If the server is restarted, your groups may need to be 
recreated. This method creates groups by a given name and keeps track of how the groups are 
related to other groups. If you are precise in how your groups are related to each other, it will
recreate your group tree.  For example, if group 'a' must come after group 'b', you will need
to explicitly specify this instead of just relying on the order that the gorups are added.

code::
(

var installation;
installation = KeepInstallationAlive();

installation.addGroup('a');
installation.addGroup('b', 'a', 'addAfter');

...
::

The KeepInstallationAlive object keeps the groups in an IdentityDictionary called groups. 
So when you wish to use your groups:

code::

...
Pbind(
	\group, Pfunc({ installation.groups['a'] }),
...
::

In the above example, we use a Pfunc because if the server is restarted, installation.groups['a']
will point at a different object after the group tree is restored.


Method:: addBus
Because the KeepInstallationAlive object may need to restart the server, you will need to add your Buses to it, so it can re-create them.
argument:: name
The name of the Bus you want to create
argument:: rate
Rate symbol: \control or \audio
argument:: numChannels
Number of channels to allocate
Discussion::
If the server is restarted, your buses may need to be recreated. This method creates buses by a 
given name and tracks them so that they can be recreated after a restart.

code::
(
var installation;
installation = KeepInstallationAlive();

installation.addBus(\fx, \audio, 2);

Pbind(
	\out, Pfunc({installation.buses[\fx]}),
...
::

In the above example, we use a Pfunc because if the server is restarted, installation.busses[\fx]
will point at a different object after the buses are restored.



Method:: loadSynthDefs
Add all of the synthDefs to the Server

Method:: monitorServer
Returns:: True if the Server is being monitored, False if not

Method:: setMonitorServer

Monitor if the server is running and optionally listen for silence.

argument:: monitor
True turns monitoring on, false turns it off
argument:: dur
How many consecutive seconds of silence are acceptable. If this is set to 0, RMS will not be monitored.
argument:: threshold
The minimum allowable RMS
argument:: watchDogDur
How many consecutive seconds the server can fail to send notifications
argument:: action
Evaluated when the server falls silent for more than the given duration

Returns:: This returns the WatchDog associated with server notifications


Discussion::
The following example listens for silence and starts a Synth when it occurs

code::
(
{
	var inst, watchdog;
	inst = KeepInstallationAlive();
	inst.boot;
	inst.addSynthDef(
		SynthDef(\sin, {|out=0, amp=0.2, dur=10, freq=440|
			var sin, env;
			sin = SinOsc.ar(freq, 0, amp);
			env = EnvGen.kr(Env.perc(0.01, dur), doneAction:2);
			Out.ar(out, (sin * env).dup);
	}));

	watchdog = inst.setMonitorServer(true, action:{Synth(\sin)});

}.fork
)
::

It's also possible to use this method only to monitor if the server has stopped and automatically restart it.

code::
(
var installation;

installation = KeepInstallationAlive();
installation.boot();
installation.setMonitorServer(true, 0); // don't listen for silence
)

(
// wait a moment, then execute the following line by itself
Server.local.quit
)
::

If you quit the server in the first code example, it will also restart




Method:: addWatchDog
Add a Thread to monitor whether a particular execution thread has checked in
argument:: id
A unique symbol for the new WatchDog
argument:: dur
How often this thread is expected to check in, in seconds
argument:: initialWait
How long before we start monitoring
argument:: tries
How many missed checkIns are allowed before the WatchDog starts executing its actions
argument:: canQuit
If true, the watchdog is allowed to quit sclang
Returns:: A new WatchDog

Method:: checkIn
Let the WatchDog know your thread is still alive
argument:: id
The symbol associated with the WatchDog you are checking in with

Method:: checkInWithFile
Write a file whenever we check in with any WatchDog.
argument:: filePath
What file we should write.  It's reccomended that this information be put into a config file
code::
checkin_file=/path/to/the/file
::


Method:: wizard
An interactive set of popup windows for creating the bash scripts needed to run your program as an installation on any system. These should work on unix systems, including OS X, however, because the installation location of SuperCollider on Macs is variable, this will need to be re-run whenever the program is moved to a new Mac.
code::
(
var inst;

inst = KeepInstallationAlive.new();
//...
// ...
i = inst;
)
// in another tab
i.wizard
::
At the end of this process, in order to use the new scripts, the code in your installation file would change in order to read arguments passed to your program: code:: inst = KeepInstallationAlive.new(thisProcess.argv[0], thisProcess.argv[1]); ::


EXAMPLES::
code::
{
i = KeepInstallationAlive();
i.boot();
i.addSynthDef(
	SynthDef(\long, {|out=0, amp=0.2, freq=440, dur=1, pan=0|

		var env, sin, panner;
		env = EnvGen.kr(Env.sine(dur), timeScale:10, doneAction:2);
		sin = SinOsc.ar(freq, 0, amp);
		panner = Pan2.ar(sin, pan, env);
		Out.ar(out, panner);
	})
);

	i.monitorServer_(true, 10, {p.resume});

	d = i.addWatchDog(\pbind);
	d.addFix({p.resume});
	d.addFix({p.start});
	d.addFix({
		p.reset;
		p.start;
	});



	p = Pseq([
		Pbind(
			\instrument, \long,
			\scale, Scale.choose,
			\degree, Pwhite(0, 7, 5),
			\dur, 0.2,
			\isalive, Pfunc({i.checkIn(\pbind)})
		),
		Pbind(
			\instrument, \long,
			\scale, Scale.choose,
			\degree, Pwhite(0, 7, 5),
			\dur, 0.5,
			\isalive, Pfunc({i.checkIn(\pbind)})
		)], 1
	).play;

}.fork
::
