TITLE::Keep An Installation Running
categories:: Control
related:: Classes/KeepInstallationAlive, Classes/WatchDog, Guides/InstallationsOnRaspberryPi
summary:: How to keep an installation running and recover from crashes.


section:: Introduction
Writing a program that can make it through the length of a single 20 minute performance can sometimes be challenging, but installation code needs to run for a full day or sometimes weeks and keep going. The first step, of course, is to make your code as bug-free as possible. However, even in this case, your code will eventually crash, though no wrong doing of your own. Therefore, the thing to do is to recover gracefully.

The latest versions of SuperCollider are actually three programs running at once - the IDE; sclang, the language; and scserver, the audio server. Any one of these things can crash.

section:: Your Program
Presumably, somewhere within your installation, there is a loop.  It might be in a Pbind or in an inf.do. If your code mostly comes from actions attached ot OSC responders or HID events, this is still a loop. Any loop can get stuck. The KeepInstallationAlive class can help to check up on your loops.

You create one instance of the KeepInstallationAlive class and then add WatchDogs to check up on your loops.

code::
(
var installation, do_something;

installation = KeepInstallationAlive();

installation.addWatchDog(\main_loop);

inf.do({

	// this is the main loop

  	do_someting.value(2);
	installation.checkIn(\main_loop);

})
)
::

We will be able to tell if the main loop has stopped checking in. Ideally, we would like to be able to recover from the loop stopping. Wrapping the loop in a task may help:

code::
(
var installation, do_something, task, watchDog;

installation = KeepInstallationAlive();

watchDog = installation.addWatchDog(\main_loop);

task = Task({
	inf.do({

		// this is the main loop

  		do_someting.value(2);
		installation.checkIn(\main_loop);
		1.wait;

	})
}).play;

watchDog.addFix({task.resume;})
watchDog.addFix({task.play;})
watchDog.addFix({task.reset;})
watchDog.addFix({task.play;})


)
::

Now we can try to retsart the task, resetting from the start if need be.  We could also execute code to put data into known states, re-initialise all our variables, etc.

If you have many threads, you should have many watchdogs. Each should have it's own id. In the example above, it's code::\main_loop::. You can remove a watchdog when you don't need it any more. code:: installation.removeWatchDog(\temporary_thread)::

subsection:: Pbinds

We deal with Pbinds in much the same way, by checking in via a Pfunc.

code::
(
var installation, pbind, watchDog;

installation = KeepInstallationAlive();

watchDog = installation.addWatchDog(\pbind);
watchDog.addFix({pbind.resume});
watchDog.addFix({pbind.start});
watchDog.addFix({
	pbind.reset;
	pbind.start;
});


pbind = Pseq([
	Pbind(
		\instrument, \default,
		\scale, Scale.choose,
		\degree, Pwhite(0, 7, 5),
		\dur, 0.2,
		\isalive, Pfunc({installation.checkIn(\pbind)})
	),
	Pbind(
		\instrument, \default,
		\scale, Scale.choose,
		\degree, Pwhite(0, 7, 5),
		\dur, 0.5,
		\isalive, Pfunc({installation.checkIn(\pbind)})
	)], inf
).play;

p = pbind;
)
::

Wait a few moments and try code::p.stop::


section:: The Server

The KeepInstallationAlive class also allows you to monitor the server.  You can check if the server has crashed, if it has gone silent, or if it has ceased exceuting some of it's synths.

If the server gets restarted, you may need to reload your synthdefs. code::KeepInstallationAlive:: can handle this for you.

code::
(
var installation, pbind, watchDog;

{
	installation = KeepInstallationAlive();

	installation.boot;

	installation.addSynthDef(
		SynthDef(\long, {|out=0, amp=0.2, freq=440, dur=1, pan=0|

			var env, sin, panner;
			env = EnvGen.kr(Env.sine(dur), timeScale:10, doneAction:2);
			sin = SinOsc.ar(freq, 0, amp);
			panner = Pan2.ar(sin, pan, env);
			Out.ar(out, panner);
		})
	);
	// ...
}.fork;

::

You can use KeepInstallationAlive's server monitor to check for silence, or crashes or both.

code::
(
var installation, pbind, watchDog;

{
	installation = KeepInstallationAlive();

	installation.boot;

	installation.addSynthDef(
		SynthDef(\long, {|out=0, amp=0.2, freq=440, dur=1, pan=0|

			var env, sin, panner;
			env = EnvGen.kr(Env.sine(dur), timeScale:10, doneAction:2);
			sin = SinOsc.ar(freq, 0, amp);
			panner = Pan2.ar(sin, pan, env);
			Out.ar(out, panner);
		})
	);

	installation.setMonitorServer(true, dur: 10, watchDogDur: 2, action:{pbind.resume});
	//...

}.fork;

// ...
::

The code::dur:: argument is the length of allowable silence in seconds. If you don't want to check for silences, set that to 0.  If you expect your installaiton to be making sound all of the time, then this could be useful.  If you expect pauses, make sure you set the duration to be longer than the longest expected pause.

The code::watchDogDur:: argument is the maximum duration in seconda that the server is allowed to stop communicating back with the language.  If your synthdefs use a lot of CPU, sometimes the server may fall behind on on sending OSC messages and seem to have crashed, but still be running fine.  Too many seconds in a row may be a bad sign.

The code::action:: argument should be a function to run if the server falls silent. This could include restarting your Synths, resetting data to a known state, etc.

code::setMonitorServer:: returns the WatchDog associated associated with checking for OSC messages.

Adding a monitor to the server also automagically puts a limitter on your output.

subsection:: Roll Your Own

You may also wish to monitor some synths in particular. You can do this with the UGen link::Classes/SendTrig::.

code::
(
var installation, pbind, watchDog, dur;

installation = KeepInstallationAlive();

dur =3;

Task({
	installation.boot;

	installation.addSynthDef(

		SynthDef(\myAmazingSynthDef, {|freq = 440|

			var sin, trig;
			SendTrig.kr(Impulse.kr(dur.reciprocal));
			sin = SinOsc.ar(freq);
			Out.ar(0, sin);

		})
	);

	"foo".postln;
	/* ... */
	s.sync;
	Synth(\myAmazingSynthDef);

}).play;

watchDog = installation.addWatchDog(\amazingSynthDef, dur);


OSCFunc({ arg msg, time;
	installation.checkIn(\amazingSynthDef);
},'/tr', s.addr);

watchDog.addFix({Synth(\myAmazingSynthDef)});
watchDog.addFix({installation.boot; Synth(\myAmazingSynthDef)});

)
::

The OSCFunc does the check in.

The watchdog first tries to just retart the synth and if that fails, tries to reboot the server and then restart the synth.

If that fails, it quits sclang.

section:: KeepInstallationAlive.wizard

When KeepInstallationAlive fails to get things going again, it can intentionally cause sclang to crash. Obviously, this is a problem in the IDE. However, we will not be running sclang through the IDE. Instead, we'll run it from a BASH script. On your computer (if you have a mac or unix), when you open a terminal, what's running in it is a Bash shell. You can write scripts for this shell, which you edit in a plain text editor. You will still have access to all of SuperCollider's GUI classes.

The KeepInstallationAlive class contains a wizard to help create the bash scripts for you, after asking you some questions in a series of pop-up windows.

To use the wizard, make a temporary change to your code to store the KeepInstallationAlive class in a global variable. For example:


code::
(
var installation, pbind, watchDog, dur;

installation = KeepInstallationAlive();

dur =3;

i = installation;

// ...
::

In the example above, the installation will now be stored in code::i::. Start your installation running. (If it takes over your display, you can stop it with link::Classes/CmdPeriod::). Then in a new tab, evaluate code::i.wizard::

This process will not overwrite any files! You can close the open window at any time to stop.

 First, it will tell you it's running. Then it will prompt you to pick the main file of your installation, which will probably be a .scd file.  The name of this file will be used as the name of your installation.

The next dialog asks whether you intend to use any GUI features.  If your installation has no GUI (or the GUI is running off of a second computer), you can run the installation 'headless', which means without any kind of display.  Otherwise, if you have a screen (because you're using a laptop, for example) or a projector, then these are displays.  You should answer this question for the computer you intend to actually run the installation on.

Then, it may ask you if you intend to write to the file system. You can use the file system as another way to test if your installation has crashed and needs to be restarted.  This is a good idea .  Otherwise, it's possible that all threads on sclang might get stuck, but sclang might not quit. If it is too stuck to write to the file system, then your bash script(s) will be able to tell that this has happened and restart your installation.

The program will then create all of your bash files for you.

You then need to edit your program again. You would change the example above to:

code::
(
var installation, pbind, watchDog, dur;

// change the next line:
installation = KeepInstallationAlive(thisProcess.argv[0], thisProcess.argv[1]);

dur =3;

//i = installation; // we don't need this line any more

// ...
::

Make sure the Installation is initialised near the very start of your program.

What this change does is allows your program to read two arguments from the command line. One is a new configuration file and the other is a port for the server.

Having a configuration file is useful because it is a way to share information between mutiple running programs. For example, if your SuperCollider program is writing to the file system, your bash program will need to know what file it is writing. Or if you have a helper script in Python, you might want it and SuperCollider to both know some of the same information. By putting  any shared information into a configuration file, you can be certain that all of your programs will agree!

Setting a server port is useful in case your installation has a Server crash.  Sometimes, when there is a crash, it's impossible to get the server to retsart and the only solution is to reboot the computer. There are many things that might be the cause of the problem, but one common one is that when the server crashed, it kept holding on to it's port. In that case, if you change the port number, the server can restart. The new scripts will change the server port in case of that kind of crash.

After you make these changes, you can keep editting your project in the IDE, but will want to run it from your new scripts. Let's say your main file is called code::DroneMachine.scd::.  You will find, in the directory with it, some new files, including your new config file code::DroneMachine.config:: and your main bash script code::DroneMachine.bash::.  On some systems you can now run your installation by double clicking on this file. On others, you will need to open the terminal, cd to the directory of your files and run it by typing code::DroneMachine.sh::.  Running it from the terminal is better, as you will be able to see the error messages and postlns.

If you run the wizard on a mac, the resulting bash file should work for your machine. However, if you want to deploy it on a different mac, you will have to delete the bash file and re-run the wizard. You may aslo need to edit the configuration file, in case your files have moved to different locations.

The resulting bash file is cross-platform and should work on mac, Linux and (specifcally) the Raspberry Pi.  If you are a Linux user, you may want to edit this script to start jack.

The essential structure of the scripts is:
code::
port=57110
while(True)
	sclang YourInstallation.scd YourInstallation.config port
    port=port+1
endwhile
::

That is to say, your installation is in an infinite loop. Every time sclang crashes, the bash script will just re-start it, thus re-setting your installation and hopefully resurrecting it.

subsection:: Helper Applications

Your installation may rely on other programs, for example, to get data.  Depending on how often you need data, you might call them directly from SuperCollider only when you need them.  Or, these programs might be running all the time and communicate with SuperCollider via OSC.  In that case, you will also need to monitor whether or not they have crashed.

Let's say you have a python script that is reading some information from an internet service.  It might be called InternetService.py. If it's supposed to send regular OSC messages to your program, you can use the KeepInstallationAlive class to see if it's still going.

code::

installation.addWatchDog(\InternetService, highest_expected_pause);

OSCFunc({ arg msg, time;
	installation.checkIn(\InternetService);
	// do whatever you do with the message
},'/InternetService', s.addr);
::

If you don't expect to get messages very often, you might want to reconsider your design slightly. For example, let's say you want to get an OSC message every time Donald Trump posts something to twitter.  This may be a pause of a few hours. Instead of only sending a message when there's a new message, you could also send a message every few minutes saying there EMPHASIS::hasn't:: been a new message.  If these fail to arrive, then KeepInstallationAlive will quit sclang.

In order to make sure your helper program starts and stops appropriately, you'll need to edit the bash file for your installation.

There will be a line in it that looks like:
code::
## Put your helper scripts here
::
Followed by an example.

Below (or in place of) the example this line, you will want to start your helper program:
code::
InternetService.py &
helper=$!
::

You put whatever the command line is to start your helper program, followed by the code::&:: sign.
The & sign starts the program running in the background (like a foked thread).

The next line code::helper=$!:: saves the PID (Process ID) of the helper program.

Then, look further down in the file for the part that says code::
## Kill your helper scripts
::
You've saved your helper's PID in the variable code::$helper:: so you can just use that to kill the helper.
code::
kill $helper || kill -9 $helper
::

If you've got more than one helper program, you'll need to start all of them, keep the PID of each in a separate variable and be certain to kill all of them.


subsection::Starting Your Installation on Boot

Depending on whether you said you were using a display, the wizard will have made one of two files. If you are on a mac, you will not use either of these, but instead will add the YourInstallation.sh file to the list of programs that start on login.

If you are running a display and are on a linux system (includig Raspberry Pi), you can set your installation to start with X windows. Copy the file Copy yourInstallation.desktop to ~/.config/autostart/, creating the directory if necessary.  You might want to edit the YourInstallation.sh file to sleep for 20 or 30 seconds at the very start. That way, if you boot into x-windows and don't want to run the installation, you have time to kill it via the process manager.

Make sure that you have set your computer to auto-log in to the account for which you've added it to autostart.


If you are running without a display, you can save a lot of unneeded overhead by not booting into x-windows at all. If you're on a Pi, you would do this by using code::sudo raspi-config::

To get your program to start without x-windows:
In a terminal run:
code::
sudo cp yourInstallation.init.d /etc/init.d/YourInstallation
sudo chmod 755 /etc/init.d/yourInstallation
sudo update-rc.d YourInstallation defaults
::

In this case, you can stop your installation by typing code::
/etc/init.d/YourInstallation stop
:: in a terminal

section:: Deploying your code

When you develop your installation, you're probably working on your own computer, logged in as yourself.  When you actually deploy the installation, you will probably not want to do this.  Even if you use your own laptop for the installation, it's a good idea to make a separate user account to run the installation. Give this user as few rights as possible. For example, you might not want to allow them to administrate the machine.  That way, if somebody starts trying to use your computer, at least they can't see your browser history.

You will need a way to manage your code, so it is available both in your own account on your own computer, and in whatever accounts on whatever computers you need.  Using git is a good solution to this. As it says in the link::Guides/UsingQuarks:: helpfile:

"Managing your code with git is optional, but you should consider using it early on. Even if you do not intend to share your code with anyone else, git provides a backup system and a time machine if you break something.

code::
# in the terminal, its easy as this:
git init
::

Bitbucket offers free hosting for private repositories, and you can setup your own git host on any machine that you have SSH access to. But you don't even need an externally hosted repository to use git.

Hard drives die, backups fail, people make mistakes. If you keep a copy on bitbucket then your work is that much safer."

And, indeed, git makes it much easier to keep track of changes across computers. If you have your code stored in git and change it on your own machine, for example, you can push the changes back to your repository, then pull them down to your target machine. Later, when you make emergency alerations (to fix the bugs that invariably don't appear until you've arrived at the show), you can also check those changes back into the central repository.

subsection:: Dependencies

If you use the KeepInstallationAlive quark, then it's a dependency that needs to be injstalled on the deployment computer, as do any other Quarks and programs that you rely on.  Make notes of what your dependencies are and put them in your README.md file.

subsection:: Making Things Pretty

If you have a visible display for your installation, you will want to think about how the screen looks during crashes. What desktop elements do you want to be visible? What colour should the screen background be?  Perhaps the background image could be the name of your installation.

subsection:: Testing

To test an installation, ideally, you would have several days with the target machine, to try running it via the bash script, from the command line, in order to read postln statements and error messages.  In any case, you should try running it as long as you can to see where it tends to crash and to try out different recovery techniques.

This is one reason that small computers, such as the Rapsberry Pi are good for installations. You can send it through the post without too much worry, and can test it yourself before it goes out.
For more on how to put installations on the Pi, see link::Guides/InstallationsOnRaspberryPi::
